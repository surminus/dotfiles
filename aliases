# vi: ft=bash

###
### Vim
###

# Install neovim manually
if test -d /usr/share/nvim; then
  export PATH=/usr/share/nvim/bin:$PATH
fi

if command -v nvim >/dev/null 2>&1 && test $HOME/.config/nvim; then
  export EDITOR=nvim
  alias vim='nvim'
  alias vi='nvim'
else
  export EDITOR=vim
fi

alias v=vim
alias bim=vim

function vimi() {
  vim $(fzf)
}
###
### End
###


###
### Git
###
function git_default_branch() {
  git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'
}

# git checkout and pull
function gcm() {
  git switch $(git_default_branch) && git pull
}

# Automatic rebase with default branch
function grb() {
  gcm && git switch - && git rebase $(git_default_branch)
}

# Interactive branch viewer
function gbr() {
  git for-each-ref refs/heads --format='%(refname)' --sort='committerdate' $@ | sed 's/refs\/heads\///g' | tac | fzf --preview='git log --color=always --oneline {} |head -20' | head -n1 || true
}

# Interactive branch selector
function gsl() {
  git switch $(gbr) $@ || true
}

# Interactive commit sha selector, automatically copies into paste buffer
function glo() {
  git log --oneline --format=format:%H $@ | fzf --preview='git show --color=always {}' || true
}

# Interactive fixup selector
function gfu() {
  git fixup $(glo) $@
}

# Cherry pick
function gcp() {
  git cherry-pick $@
}

# Move to root of repo
function grt() {
  if command -v z >/dev/null 2>&1; then
    z $(git rev-parse --show-toplevel)
  else
    cd $(git rev-parse --show-toplevel)
  fi
}

alias gco="git checkout"
alias gsw="git switch"

alias commit="git rev-parse HEAD"
alias branch="git rev-parse --abbrev-ref HEAD"

###
### End
###


###
### Bat
###
if $(which batcat >/dev/null 2>&1); then
  alias cat='batcat'

  if $(which fzf >/dev/null 2>&1); then
    alias fzf="fzf --preview 'batcat --style=numbers --color=always --line-range :500 {}'"
  fi
fi

if $(which bat >/dev/null 2>&1); then
  alias cat='bat'

  if $(which fzf >/dev/null 2>&1); then
    alias fzf="fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'"
  fi
fi
###
### End
###


###
### Misc
###
function update-vim-plugins() {
  vim -c 'PlugUpdate' -c 'qa!'
  mkdir -p ~/.vim && touch ~/.vim/plugins.updated
}

function update-tmux-plugins() {
  ~/.tmux/plugins/tpm/bin/update_plugins all
  mkdir -p ~/.tmux && touch ~/.tmux/plugins.updated
}

# Reload previously loaded shell
alias reload_shell="exec $SHELL"

# Reload kitty terminal
alias reload_kitty="kill -SIGUSR1 \$(pgrep kitty)"

# Shrug
alias shrug="echo '¯\_(ツ)_/¯'"

# Ignore snaps
alias df='df -x"squashfs"'

# Bundler
alias bi="bundle install"
alias be="bundle exec"

# Replace rpl with sd in string mode
alias rpl="sd -s"

# Tmux
alias tmux="tmux -2"

# myduct
alias myduct="sudo ~/.myduct/build/myduct"

# Docker Compose
if command -v docker >/dev/null 2>&1; then
  alias docker-compose="docker compose"
fi

# Terraform
function tf() {
  if command -v tofu >/dev/null 2>&1; then
    tofu $@
    export TERRAFORM_BINARY_NAME="tofu"
  else
    terraform $@
  fi
}

###
### End
###
